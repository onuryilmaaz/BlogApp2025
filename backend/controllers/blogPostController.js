const BlogPost = require("../models/BlogPost");
const mongoose = require("mongoose");
const NotificationService = require("../services/notificationService");
const slugify = require("slugify");

// @desc   Create a new blog post
// @route  POST /api/posts
// @access Private (Admin Only)
const createPost = async (req, res) => {
  try {
    const { title, content, coverImageUrl, tags, isDraft, generatedByAI } =
      req.body;

    // Generate slug manually to ensure it's set
    const baseSlug = slugify(title, {
      lower: true,
      strict: true,
      remove: /[*+~.()'"!:@]/g,
    });

    // Ensure slug is unique
    let slug = baseSlug;
    let counter = 1;

    while (true) {
      const existingPost = await BlogPost.findOne({ slug: slug });
      if (!existingPost) {
        break;
      }
      slug = `${baseSlug}-${counter}`;
      counter++;
    }

    const newPost = new BlogPost({
      title,
      slug,
      content,
      coverImageUrl,
      tags,
      author: req.user._id,
      isDraft,
      generatedByAI,
      needsReview: generatedByAI ? true : false,
    });

    await newPost.save();
    res.status(201).json(newPost);
  } catch (error) {
    res
      .status(500)
      .json({ message: "Failed to create post", error: error.message });
  }
};

// @desc   Update an existing blog post
// @route  PUT /api/posts/:id
// @access Private (Author or Admin)
const updatePost = async (req, res) => {
  try {
    const post = await BlogPost.findById(req.params.id);
    if (!post) return res.status(404).json({ message: "Post not found" });
    if (
      post.author.toString() !== req.user._id.toString() &&
      !req.user.isAdmin
    ) {
      return res
        .status(403)
        .json({ message: "Not authorized to update this post" });
    }
    const updatedData = req.body;

    // Update the post - slug will be auto-generated by pre-save middleware if title changes
    Object.assign(post, updatedData);
    const updatedPost = await post.save();
    res.json(updatedPost);
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// @desc   Delete a blog post
// @route  DELETE /api/posts/:id
// @access Private (Author or Admin)
const deletePost = async (req, res) => {
  try {
    const post = await BlogPost.findById(req.params.id);
    if (!post) return res.status(404).json({ message: "Post noy found" });

    await post.deleteOne();
    res.json({ message: "Post deleted" });
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// @desc   Get blog post by status (all,published or draft) and include counts
// @route  GET /api/posts?status=published|draft|all|pendingReview&page=1
// @access Public for published, Private/Admin for others
const getAllPosts = async (req, res) => {
  try {
    const status = req.query.status || "all";
    const page = parseInt(req.query.page) || 1;
    const limit = 5;
    const skip = (page - 1) * limit;

    // Determine filter for main posts response
    let filter = {};
    if (status === "published") {
      filter.isDraft = false;
    } else if (status === "draft") {
      filter.isDraft = true;
    }
    // For status === "all", filter remains empty to get all posts

    // Fetch paginated posts
    const posts = await BlogPost.find(filter)
      .populate("author", "name profileImageUrl")
      .sort({ updatedAt: -1 })
      .skip(skip)
      .limit(limit);

    // Count totals for pagination and tab counts
    const [totalCount, allCount, publishedCount, draftCount] =
      await Promise.all([
        BlogPost.countDocuments(filter),
        BlogPost.countDocuments(),
        BlogPost.countDocuments({ isDraft: false }),
        BlogPost.countDocuments({ isDraft: true }),
      ]);

    res.json({
      posts,
      page,
      totalPages: Math.ceil(totalCount / limit),
      totalCount,
      counts: {
        all: allCount,
        published: publishedCount,
        draft: draftCount,
      },
    });
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// @desc   Get a single blog post by slug or ID
// @route  GET /api/posts/:identifier
// @access Public
const getPostBySlug = async (req, res) => {
  try {
    const { identifier } = req.params;

    // Check if identifier is a valid ObjectId or treat as slug
    const isObjectId = /^[0-9a-fA-F]{24}$/.test(identifier);

    let query;
    if (isObjectId) {
      query = { _id: identifier };
    } else {
      query = { slug: identifier };
    }

    const post = await BlogPost.findOne(query).populate(
      "author",
      "name profileImageUrl"
    );

    if (!post) {
      return res.status(404).json({ message: "Post not found" });
    }

    // Only show published posts to non-authors (unless user is admin)
    if (post.isDraft) {
      if (
        !req.user ||
        (req.user._id.toString() !== post.author._id.toString() &&
          req.user.role !== "Admin")
      ) {
        return res.status(404).json({ message: "Post not found" });
      }
    }

    // Increment view count only for published posts
    if (!post.isDraft) {
      post.views += 1;
      await post.save();
    }

    // Add user's like status if user is authenticated
    const postData = post.toObject();
    if (req.user) {
      postData.isLikedByUser = post.likedBy.includes(req.user._id);
    } else {
      postData.isLikedByUser = false;
    }

    res.json(postData);
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// @desc   Get posts by tag with pagination and filtering
// @route  GET /api/posts/tag/:tag?page=1&limit=10
// @access Public
const getPostsByTags = async (req, res) => {
  try {
    const { tag } = req.params;
    const { page = 1, limit = 10 } = req.query;
    const skip = (parseInt(page) - 1) * parseInt(limit);

    // Build query for published posts only
    const query = {
      tags: tag,
      isDraft: false,
    };

    const posts = await BlogPost.find(query)
      .populate("author", "name profileImageUrl")
      .sort({ createdAt: -1, views: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    const totalCount = await BlogPost.countDocuments(query);

    res.json({
      posts,
      tag,
      pagination: {
        currentPage: parseInt(page),
        totalPages: Math.ceil(totalCount / parseInt(limit)),
        totalPosts: totalCount,
        hasNextPage: parseInt(page) < Math.ceil(totalCount / parseInt(limit)),
        hasPrevPage: parseInt(page) > 1,
      },
    });
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// @desc   Search posts by title or content with relevance scoring
// @route  GET /api/posts/search?q=keyword&page=1&limit=10
// @access Public
const searchPosts = async (req, res) => {
  try {
    const { q, page = 1, limit = 10 } = req.query;

    if (!q || q.trim().length === 0) {
      return res.status(400).json({ message: "Search query is required" });
    }

    const skip = (parseInt(page) - 1) * parseInt(limit);

    // Use MongoDB's full-text search with relevance scoring
    const searchQuery = {
      $text: { $search: q },
      isDraft: false,
    };

    // Execute search with text score for relevance sorting
    const posts = await BlogPost.find(searchQuery, {
      score: { $meta: "textScore" },
    })
      .populate("author", "name profileImageUrl")
      .sort({ score: { $meta: "textScore" }, createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    // Get total count for pagination
    const totalCount = await BlogPost.countDocuments(searchQuery);

    res.json({
      posts,
      pagination: {
        currentPage: parseInt(page),
        totalPages: Math.ceil(totalCount / parseInt(limit)),
        totalPosts: totalCount,
        hasNextPage: parseInt(page) < Math.ceil(totalCount / parseInt(limit)),
        hasPrevPage: parseInt(page) > 1,
      },
      searchQuery: q,
    });
  } catch (error) {
    console.error("Search error:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// @desc   Increment post view count
// @route  PUT /api/posts/:id/view
// @access Public
const incrementView = async (req, res) => {
  try {
    await BlogPost.findByIdAndUpdate(req.params.id, { $inc: { views: 1 } });
    res.json({ message: "View count increment" });
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// @desc   Like/Unlike a post
// @route  PUT /api/posts/:id/like
// @access Private
const likePost = async (req, res) => {
  try {
    const post = await BlogPost.findById(req.params.id).populate(
      "author",
      "name _id"
    );
    if (!post) {
      return res.status(404).json({ message: "Post not found" });
    }

    const userId = req.user._id;
    const hasLiked = post.likedBy.includes(userId);

    if (hasLiked) {
      // Unlike the post
      await BlogPost.findByIdAndUpdate(req.params.id, {
        $pull: { likedBy: userId },
        $inc: { likes: -1 },
      });

      res.json({
        message: "Like removed",
        likes: Math.max(0, post.likes - 1),
        isLiked: false,
      });
    } else {
      // Like the post
      await BlogPost.findByIdAndUpdate(req.params.id, {
        $addToSet: { likedBy: userId },
        $inc: { likes: 1 },
      });

      // Send notification to post author (if not liking own post)
      if (post.author._id.toString() !== req.user._id.toString()) {
        try {
          await NotificationService.notifyPostLike({
            postAuthorId: post.author._id,
            likerName: req.user.name,
            likerId: req.user._id,
            postTitle: post.title,
            postId: post._id,
            postSlug: post.slug,
          });
        } catch (notificationError) {
          console.error("Failed to send like notification:", notificationError);
          // Don't fail the like operation if notification fails
        }
      }

      res.json({
        message: "Like added",
        likes: post.likes + 1,
        isLiked: true,
      });
    }
  } catch (error) {
    console.error("Like post error:", error);
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// @desc   Get top trending posts
// @route  GEt /api/posts/trending
// @access Public
const getTopPosts = async (req, res) => {
  try {
    const posts = await BlogPost.find({})
      .populate("author", "name profileImageUrl")
      .sort({
        views: -1,
        likes: -1,
      })
      .limit(5);
    res.json(posts);
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// @desc   Generate slug from title
// @route  POST /api/posts/generate-slug
// @access Private
const generateSlug = async (req, res) => {
  try {
    const { title, excludeId } = req.body;

    if (!title) {
      return res.status(400).json({ message: "Title is required" });
    }

    const slug = await BlogPost.generateUniqueSlug(title, excludeId);

    res.json({
      title,
      slug,
      isValid: BlogPost.isValidSlug(slug),
    });
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// @desc   Validate slug format and availability
// @route  POST /api/posts/validate-slug
// @access Private
const validateSlug = async (req, res) => {
  try {
    const { slug, excludeId } = req.body;

    if (!slug) {
      return res.status(400).json({ message: "Slug is required" });
    }

    // Check format
    const isValidFormat = BlogPost.isValidSlug(slug);
    if (!isValidFormat) {
      return res.json({
        isValid: false,
        isAvailable: false,
        message:
          "Invalid slug format. Use only lowercase letters, numbers, and hyphens.",
      });
    }

    // Check availability
    const query = { slug };
    if (excludeId) {
      query._id = { $ne: excludeId };
    }

    const existingPost = await BlogPost.findOne(query);
    const isAvailable = !existingPost;

    res.json({
      slug,
      isValid: isValidFormat,
      isAvailable,
      message: isAvailable ? "Slug is available" : "Slug is already taken",
    });
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

// @desc   Regenerate slug for existing post
// @route  PUT /api/posts/:id/regenerate-slug
// @access Private (Author or Admin)
const regenerateSlug = async (req, res) => {
  try {
    const post = await BlogPost.findById(req.params.id);

    if (!post) {
      return res.status(404).json({ message: "Post not found" });
    }

    // Check authorization
    if (
      post.author.toString() !== req.user._id.toString() &&
      req.user.role !== "Admin"
    ) {
      return res
        .status(403)
        .json({ message: "Not authorized to update this post" });
    }

    const oldSlug = post.slug;
    await post.regenerateSlug();

    res.json({
      message: "Slug regenerated successfully",
      oldSlug,
      newSlug: post.slug,
      post,
    });
  } catch (error) {
    res.status(500).json({ message: "Server error", error: error.message });
  }
};

module.exports = {
  createPost,
  updatePost,
  deletePost,
  getAllPosts,
  getPostBySlug,
  getPostsByTags,
  searchPosts,
  incrementView,
  likePost,
  getTopPosts,
  generateSlug,
  validateSlug,
  regenerateSlug,
};
